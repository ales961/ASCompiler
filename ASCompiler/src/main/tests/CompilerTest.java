import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.List;
import java.util.stream.Collectors;

public class CompilerTest {

    /**
     * Helper method to compile source code and verify the generated bytecode.
     * @param sourceCode The input source code to compile.
     * @param expectedBytecode The expected bytecode as a string.
     */
    private void assertBytecodeGeneration(String sourceCode, String expectedBytecode) {
        // Compile source code to bytecode
        Main compiler = new Main();  // Assume Compiler class handles full compilation
        ASTNode ast = compiler.compileToAST(sourceCode);
        List<BytecodeInstruction> generatedBytecode = compiler.generateBytecode(ast);

        // Convert the List of BytecodeInstructions to a properly formatted string for comparison
        String actualBytecode = generatedBytecode.stream()
                .map(BytecodeInstruction::toString) // Call toString() on each instruction
                .collect(Collectors.joining("\n"))  // Join each instruction with a newline
                .trim();

        String expected = expectedBytecode.trim();

        // Assert that the actual bytecode matches the expected bytecode
        assertEquals(expected, actualBytecode, "Generated bytecode does not match expected bytecode.");
    }


    @Test
    public void testBasicArithmetic() {
        String sourceCode = "var a = 2;\nvar b = 3;\nvar result = a + b;";
        String expectedBytecode = """
            PUSH 2
            POP a
            PUSH 3
            POP b
            PUSH a
            PUSH b
            ADD
            POP result
            """;

        assertBytecodeGeneration(sourceCode, expectedBytecode);
    }

    @Test
    public void testConditionalStatement() {
        String sourceCode = "var a = 5;\nif (a > 3) {\n var b = a - 1;\n}";
        String expectedBytecode = """
            PUSH 5
            POP a
            PUSH a
            PUSH 3
            GT
            BRANCH_IF_FALSE false_0
            PUSH a
            PUSH 1
            SUB
            POP b
            JUMP endIf_1
            false_0:
            endIf_1:
            """;

        assertBytecodeGeneration(sourceCode, expectedBytecode);
    }

    @Test
    public void testWhileLoop() {
        String sourceCode = "var n = 3;\nvar sum = 0;\nwhile (n > 0) {\n sum = sum + n;\n n = n - 1;\n}";
        String expectedBytecode = """
            PUSH 3
            POP n
            PUSH 0
            POP sum
            loopStart_0:
            PUSH n
            PUSH 0
            GT
            BRANCH_IF_FALSE loopEnd_1
            PUSH sum
            PUSH n
            ADD
            POP sum
            PUSH n
            PUSH 1
            SUB
            POP n
            JUMP loopStart_0
            loopEnd_1:
            """;

        assertBytecodeGeneration(sourceCode, expectedBytecode);
    }

    @Test
    public void testFunctionWithReturn() {
        String sourceCode = "function add(a, b): i32 {\n return a + b;\n}";
        String expectedBytecode = """
PUSH a
PUSH b
ADD
RETURN
            """;

        assertBytecodeGeneration(sourceCode, expectedBytecode);
    }

    @Test
    public void testFibFunction() {
        String sourceCode = """
        function fib(): i32 {
            var a = 0, b = 1;
            var n = 5;
   
            if (n > 0) {
                while (n != 0) {
                    n = n - 1;
                    let t = a + b;
                    a = b;
                    b = t;
                }
            }
            return a;
        }
        """;
        String expectedBytecode = """
        PUSH 0
        POP a
        PUSH 1
        POP b
        PUSH 5
        POP n
        PUSH n
        PUSH 0
        GT
        BRANCH_IF_FALSE false_0
        loopStart_2:
        PUSH n
        PUSH 0
        NEQ
        BRANCH_IF_FALSE loopEnd_3
        PUSH n
        PUSH 1
        SUB
        POP n
        PUSH a
        PUSH b
        ADD
        POP t
        PUSH b
        POP a
        PUSH t
        POP b
        JUMP loopStart_2
        loopEnd_3:
        JUMP endIf_1
        false_0:
        endIf_1:
        PUSH a
        RETURN
        """;

        assertBytecodeGeneration(sourceCode, expectedBytecode);
    }


}

